package com.example.archiveandroid.feature.home.recommend.detail.view

import androidx.compose.ui.graphics.Color
import androidx.lifecycle.SavedStateHandle
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.archiveandroid.core.ui.components.DetailScreenState
import com.example.archiveandroid.core.util.DateFormatter
import com.example.archiveandroid.feature.home.recommend.data.repository.RecommendRepository
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import javax.inject.Inject

@HiltViewModel
class RecommendDetailViewModel @Inject constructor(
    private val recommendRepository: RecommendRepository
) : ViewModel() {
    
    private var activityId: String = ""
    
    private val _uiState = MutableStateFlow(
        DetailScreenState(isLoading = true)
    )
    val uiState: StateFlow<DetailScreenState> = _uiState.asStateFlow()
    
    fun loadActivityDetail(activityId: String) {
        this.activityId = activityId
        
        if (activityId.isEmpty()) {
            _uiState.value = DetailScreenState(
                isLoading = false,
                error = "ÌôúÎèô IDÍ∞Ä ÏóÜÏäµÎãàÎã§"
            )
            return
        }
        
        viewModelScope.launch {
            _uiState.value = _uiState.value.copy(isLoading = true, error = null)
            
            recommendRepository.getRecommendActivityDetail(activityId)
                .onSuccess { detailDto ->
                    val detailData = detailDto.toDetailScreenData()
                    _uiState.value = DetailScreenState(
                        isLoading = false,
                        data = detailData
                    )
                }
                .onFailure { exception ->
                    _uiState.value = DetailScreenState(
                        isLoading = false,
                        error = exception.message ?: "ÌôúÎèô Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§"
                    )
                }
        }
    }
    
    fun refresh() {
        if (activityId.isNotEmpty()) {
            loadActivityDetail(activityId)
        }
    }
}

/**
 * RecommendActivityDetailDtoÎ•º DetailScreenDataÎ°ú Î≥ÄÌôò
 */
private fun com.example.archiveandroid.feature.home.recommend.data.remote.dto.RecommendActivityDetailDto.toDetailScreenData(): com.example.archiveandroid.core.ui.components.DetailScreenData {
    // ÎÇ†Ïßú Ìè¨Îß∑ÌåÖ
    val dateText = DateFormatter.formatDateRange(this.startAt, this.endAt)
    
    // Ïù¥ÎØ∏ÏßÄ URL Î¶¨Ïä§Ìä∏ ÏÉùÏÑ± (Ïç∏ÎÑ§ÏùºÏù¥ ÏûàÏúºÎ©¥ ÏÇ¨Ïö©)
    val imageUrls = if (this.thumbnailImageUrl != null) {
        listOf(this.thumbnailImageUrl)
    } else {
        emptyList()
    }
    
    // Ïπ¥ÌÖåÍ≥†Î¶¨ ÌëúÏãúÎ™Ö (ÏòÅÎ¨∏ Ïπ¥ÌÖåÍ≥†Î¶¨Î•º ÌïúÍ∏ÄÎ°ú Î≥ÄÌôò)
    val categoryDisplayName = getCategoryDisplayName(this.category)
    
    // Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÉâÏÉÅ
    val (bgColor, fgColor) = getCategoryColor(categoryDisplayName)
    
    // Ïû•ÏÜå Ï†ïÎ≥¥ Ï°∞Ìï©
    val locationText = "${this.placeName} (${this.placeDistrict})"
    
    // ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Ï°∞Ìï© (descriptionÏù¥ ÏóÜÏúºÎ©¥ ÏÉÅÏÑ∏Ï†ïÎ≥¥ Ï†ÑÏ≤¥Î•º ÎùÑÏö∞ÏßÄ ÏïäÏùå)
    val memoText = if (this.description.isNullOrEmpty()) {
        ""
    } else {
        buildString {
            append(this@toDetailScreenData.description)
            append("\n\n")
            append("üìç Ï£ºÏÜå: ${this@toDetailScreenData.placeAddress}\n")
            if (!this@toDetailScreenData.placePhone.isNullOrEmpty()) {
                append("üìû Ï†ÑÌôî: ${this@toDetailScreenData.placePhone}\n")
            }
            if (!this@toDetailScreenData.placeHomepage.isNullOrEmpty()) {
                append("üîó ÌôàÌéòÏù¥ÏßÄ: ${this@toDetailScreenData.placeHomepage}\n")
            }
        }
    }
    
    return com.example.archiveandroid.core.ui.components.DetailScreenData(
        title = this.title,
        categoryDisplayName = categoryDisplayName,
        activityDate = dateText,
        location = locationText,
        memo = memoText,
        images = imageUrls,
        recommendationReason = null, // API Î™ÖÏÑ∏ÏÑúÏóê ÏóÜÏùå
        categoryBg = bgColor,
        categoryFg = fgColor
    )
}

/**
 * ÏòÅÎ¨∏ Ïπ¥ÌÖåÍ≥†Î¶¨Î•º ÌïúÍ∏Ä ÌëúÏãúÎ™ÖÏúºÎ°ú Î≥ÄÌôò
 */
private fun getCategoryDisplayName(category: String): String {
    return when (category.uppercase()) {
        "MUSICAL" -> "ÎÆ§ÏßÄÏª¨"
        "THEATER" -> "Ïó∞Í∑π"
        "MOVIE" -> "ÏòÅÌôî"
        "EXHIBITION" -> "Ï†ÑÏãú"
        "COOKING" -> "ÏöîÎ¶¨"
        "VOLUNTEER" -> "Î¥âÏÇ¨"
        "READING" -> "ÎèÖÏÑú"
        "CONCERT" -> "ÏΩòÏÑúÌä∏"
        "FESTIVAL" -> "Ï∂ïÏ†ú"
        "WORKSHOP" -> "ÏõåÌÅ¨ÏÉµ"
        "SPORTS" -> "Ïä§Ìè¨Ï∏†"
        "TRAVEL" -> "Ïó¨Ìñâ"
        "OUTDOOR" -> "ÏïºÏô∏ÌôúÎèô"
        "HOBBY" -> "Ï∑®ÎØ∏"
        "STUDY" -> "Ïä§ÌÑ∞Îîî"
        "NETWORKING" -> "ÎÑ§Ìä∏ÏõåÌÇπ"
        "EXPERIENCE" -> "Ï≤¥Ìóò"
        "OTHER" -> "Í∏∞ÌÉÄ"
        else -> category
    }
}

/**
 * Ïπ¥ÌÖåÍ≥†Î¶¨Ïóê Îî∞Î•∏ ÏÉâÏÉÅ Î∞òÌôò
 */
private fun getCategoryColor(category: String): Pair<Color, Color> {
    return when (category) {
        "Ïó¨Ìñâ" -> Pair(Color(0xFFE8F0FF), Color(0xFF335C99))
        "ÎèÖÏÑú" -> Pair(Color(0xFFFFEFE6), Color(0xFFB04A17))
        "Ïä§Ìè¨Ï∏†", "Ïä§Ìè¨Ï∏† Í¥ÄÎûå" -> Pair(Color(0xFFEAF5FF), Color(0xFF2C5A8A))
        "Ïö¥Îèô" -> Pair(Color(0xFFE7FFF2), Color(0xFF138A52))
        "Ï†ÑÏãú" -> Pair(Color(0xFFFFF4E5), Color(0xFF9A6B1A))
        "Î¥âÏÇ¨" -> Pair(Color(0xFFEFF7FF), Color(0xFF2D6AA3))
        "ÎÆ§ÏßÄÏª¨" -> Pair(Color(0xFFF4E9FF), Color(0xFF6B39A6))
        "ÏïÖÍ∏∞ Ïó∞Ï£º" -> Pair(Color(0xFFEFF9FF), Color(0xFF1F6E8C))
        "Ïó∞Í∑π" -> Pair(Color(0xFFFFF0F5), Color(0xFF8B4067))
        "ÏòÅÌôî" -> Pair(Color(0xFFE8E8E8), Color(0xFF4A4A4A))
        "ÏΩòÏÑúÌä∏" -> Pair(Color(0xFFFFE8F0), Color(0xFF993366))
        "Ï∂ïÏ†ú" -> Pair(Color(0xFFFFFBE6), Color(0xFF996600))
        "Ï≤¥Ìóò" -> Pair(Color(0xFFE6F9FF), Color(0xFF006699))
        "ÏöîÎ¶¨" -> Pair(Color(0xFFFFF3E0), Color(0xFFE65100))
        "ÏõåÌÅ¨ÏÉµ" -> Pair(Color(0xFFF3E5F5), Color(0xFF7B1FA2))
        "ÏïºÏô∏ÌôúÎèô" -> Pair(Color(0xFFE8F5E9), Color(0xFF2E7D32))
        "Ï∑®ÎØ∏" -> Pair(Color(0xFFFCE4EC), Color(0xFFC2185B))
        "Ïä§ÌÑ∞Îîî" -> Pair(Color(0xFFE3F2FD), Color(0xFF1565C0))
        "ÎÑ§Ìä∏ÏõåÌÇπ" -> Pair(Color(0xFFFFF9C4), Color(0xFFF57F17))
        "Í∏∞ÌÉÄ" -> Pair(Color(0xFFECEFF1), Color(0xFF546E7A))
        else -> Pair(Color(0xFFE0E0E0), Color(0xFF666666))
    }
}
